comandos para git
cambiar de disco duro cd /mnt/e
history ---> !+numero


1. git rm --cached + nombre ---> borrar contenido de Staging 
    1.1 git rm --force: Elimina los archivos de Git y del disco duro. 
        Git siempre guarda todo, por lo que podemos acceder al registro de la 
        existencia de los archivos, de modo que podremos recuperarlos si es necesario 
        (pero debemos usar comandos más avanzados).
2. git config --global user.name "jhonny" ---> configurar el git 
3. git config --global user.email "jhonny.agudelo@" ---> configurar el git 
4. git show ---> mirar los cambios que se hicieron en un archivo
5. git diff --->comparar repositorios con el numero del commit
6. git reset --->nos permite volver a una version anterior
    6.1 --hard volver a todo
    6.2 --soft
7. git log --stat ---> permite ver cambiaos especificos
8. git chekout + commit ---> vuelve al archivo viejo
    8.1  git chekout master + nombre ---> vuelve al archivo actualizado

9. git commit -am "nombre" ---> sirve solo cuando ya han hecho un add a todos los archivos
10. git branch ---> muestra el nombre de las ramas existentes
11. git merge ---> fusiona las ramas (ejemplo: estar en la rama master y llamar con una development) git merge cabecera
12. git pull origin master --allow-unrelated-histories
13. git remote add origin URL
14. git remote
15. git remote -v
16. git push origin master

------> crear una llave ssh <--------
Tienes que estar en el home de tu pc
1. ssh-keygen -t rsa -b 4096 -C "jhonny.agudelo3120@gmail.com"
2. ir a la carperta donde se creo y copiar el codigo del id_rsa.pub
3. ssh-add + ruta de la llave privada  ----> “ssh-add ~/.ssh/id_rsa”
4. ir a settings -> ssh and gpg key y copiar la clave publica

----->cambiar el remote por la de ssh <-------
1. remote -v
2. git remote set-url origin url-ssh-del-repositorio-en-github

-----> crear alias <-----
1. alias arbol="git log --all --graph --decorate --oneline"   

-----> crear tags <-----
1. git tag -a v0.1 -m "primeras clases del curso" + commit
2. git tag --> ver los nombres
3. git show-ref --tags
4. git push origin --tags ---> subir tag
5. git tag -d + nombre 
6. git push origin :refs/tags/ + nombre

-----> manejo de ramas <-------
1. git branch ---> muestra las ramas
2. git show-branch ---> muestra las ramas y algo de info
3. git show-branch --all muestra lo mismo al anterior con mas detalle
4. gitk ---> muestra la consola visual
5. git branch + nombre
6. git checkout -b + nombre

---->Flujo de trabajo<----
1. settings - > colaborations
2. pull request -->  estado intermedio antes de enviar el merge, para que los lideres revisen el codigo
3. fork ----> tomar una copia del estado actual del proyecto
        3.1 fork clonar repositorios
        3.2 git clone ruta publica del proyecto
        3.3 git diff
        3.4 git commit -am "mensaje"
        3.5 git push origin master
        3.6 pull request
        3.7 comparar los forks
        3.8 git remote add upstream (link)
        3.9 asi añadimos la fuente nueva rama para traer de github
        3.10 git pull upstream master
        3.11 git commit -am "fusion"
        3.12 git push origin master

-----> .gitignore <-----
1. ingresar los archivos que no se deben de subir ejemplo : claves, imagenes entre otras
